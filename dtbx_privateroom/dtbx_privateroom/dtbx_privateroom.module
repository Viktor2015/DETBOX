<?php

/**
 * init().
 */

  
function dtbx_privateroom_init() {

static $already_added = FALSE;

  if ($already_added) {
    return; // Don't add the JavaScript and CSS multiple times.
  }	
  // Include the CTools tools that we need.
  ctools_include('ajax');
  ctools_include('modal');

  // Add CTools' javascript to the page.
  ctools_modal_add_js();
  
  $path = drupal_get_path('module', 'dtbx_privateroom');
  drupal_add_js($path . '/js/dtbx_privateroom.js', array('weight' => -20));
  
  $already_added = TRUE;
}

/**
 * Implements hook_menu().
 */
 
function dtbx_privateroom_menu() 
{


    $items['dtbx_privateroom'] = array(
        'title' => 'Личные данные',
        'access callback' => 'dtbx_privateroom_access',
        'page callback' => 'dtbx_privateroom_callback',
		'page arguments' => array(1),		
        'type' => MENU_CALLBACK,
    );
	return $items;
}

/**
 * Implements hook_theme().
 */
  
function dtbx_privateroom_theme() {
  return array(
    'dtbx_privateroom_table' => array(
      'render element' => 'form',
    ),
  );
}	

 
 
/**
* Page callback.
**/

function dtbx_privateroom_callback($ajax) 
{
  if ($ajax) {
    global $user;
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Личный кабинет ') . $user -> name
    );

    $output = ctools_modal_form_wrapper('dtbx_privateroom_page', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
	
    print ajax_render($output);
  }
  else {
    return drupal_get_form('dtbx_privateroom_page');
  }	
}

function dtbx_privateroom_form_process_password_confirm($element) {
  global $user;
  
  $element['pass1']['#title'] = t('Новый пароль'); 
  $element['pass2']['#title'] = t('Подтвердите новый пароль');


  $js_settings = array(
    'password' => array(
      'strengthTitle' => t('Password strength:'),
      'hasWeaknesses' => t('To make your password stronger:'),
      'tooShort' => t('Make it at least 6 characters'),
      'addLowerCase' => t('Add lowercase letters'),
      'addUpperCase' => t('Add uppercase letters'),
      'addNumbers' => t('Add numbers'),
      'addPunctuation' => t('Add punctuation'),
      'sameAsUsername' => t('Make it different from your username'),
      'confirmSuccess' => t('yes'),
      'confirmFailure' => t('no'),
      'weak' => t('Weak'),
      'fair' => t('Fair'),
      'good' => t('Good'),
      'strong' => t('Strong'),
      'confirmTitle' => t('Passwords match:'),
      'username' => (isset($user->name) ? $user->name : ''),
    ),
  );

  $element['#attached']['js'][] = drupal_get_path('module', 'user') . '/user.js';
  // Ensure settings are only added once per page.
  static $already_added = FALSE;
  if (!$already_added) {
    $already_added = TRUE;
    $element['#attached']['js'][] = array('data' => $js_settings, 'type' => 'setting');
  }

  return $element;
}


function dtbx_privateroom_page($form, &$form_state) 
{

	$surname = "";
	$firstname = "";
	$patronname = "";
	$companyname = "";
	$juraddress = "";
	$realaddress = "";
	$contact = "";
	$profile = "Профиль";
	$persondata = "Персональные данные";	
	$pl = "Прайс-лист";
	
	
	
	global $user;
	$items = db_query('select * from t_user where uid = :uid', array(':uid' => $user->uid))->fetchObject();
	
	if(count($items) > 0)
	{
		$surname = $items->USER_SURNAME;
		$firstname = $items->USER_NAME;
		$patronname = $items->USER_PATRONYMIC;
		$companyname = $items->COMPANY_NAME;
		$juraddress = $items->COMPANY_ADDRESS;
		$realaddress = $items->COMPANY_ACTUAL_ADDRESS;
		$contact = $items->COMPANY_CONTACT;
		//$persondata .= $items->USER_LOGIN;
	}
  
  //$form['#attributes'] = array('class' => 'ctools-use-modal');
 
  $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
	'#title' => $items->USER_LOGIN, 
	//'#default_tab' => 'edit-pl'
  ); 
//
  module_load_include('pages.inc', 'user');
  $form_user = drupal_get_form('user_profile_form', $user, 'account');
  /*
  $form_user['account']['#group'] = 'vertical_tabs';
  $form_user['locale']['#group'] = 'vertical_tabs';
  $form_user['picture']['#group'] = 'vertical_tabs';    
  */ 

  $form['profile'] = array(
    '#type' => 'fieldset', 
    '#title' => t($profile), 
    '#tree' => TRUE,
	'#group' => 'vertical_tabs',
	'#validate' => array('dtbx_privateroom_profile_validate')
  );
  
  
  $form['profile']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 60,
    '#maxlength' => USERNAME_MAX_LENGTH,
	'#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
	'#default_value' => $user->name,
    '#required' => TRUE
  );
  
  $form['profile']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
    '#required' => TRUE,
    '#default_value' => $user->mail,  
  );

  $form['profile']['current_pass'] = array(
    '#type' => 'password',
    '#size' => 25,
    '#title' => t('Current password'),	
  );
  
  $form['profile']['pass'] = array(
    '#type' => 'password_confirm',
    '#size' => 25,
	'#process' => array('form_process_password_confirm', 'dtbx_privateroom_form_process_password_confirm'),
    '#description' => t('To change the current user password, enter the new password in both fields.'),
  );   
  

//   
  $form['access'] = array(
    '#type' => 'fieldset', 
    '#title' => t($persondata), 
    '#tree' => TRUE,
	'#group' => 'vertical_tabs'
  );  
  
  $form['access']['surname'] = array(
    '#type' => 'textfield', 
	'#title' => t('Фамилия'), 
    '#default_value' => $surname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['firstname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Имя'), 
    '#default_value' => $firstname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['patronname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Отчество'), 
    '#default_value' => $patronname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['companyname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Наименование компании'), 
    '#default_value' => $companyname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['juraddress'] = array(
    '#type' => 'textfield', 
    '#title' => t('Юридический адрес'), 
    '#default_value' => $juraddress, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['realaddress'] = array(
    '#type' => 'textfield', 
    '#title' => t('Фактический  адрес'), 
    '#default_value' => $realaddress, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['contact'] = array(
    '#type' => 'textfield', 
    '#title' => t('Контактное лицо'), 
    '#default_value' => $contact, 
    '#size' => 60, 
    '#maxlength' => 128
  );

//


  $form['pl'] = array(
    '#type' => 'fieldset', 
    '#title' => t($pl), 
    '#tree' => TRUE,
	'#group' => 'vertical_tabs'	
  ); 

  $form['pl']['table'] = array(
    '#tree' => TRUE,
    '#theme' => 'dtbx_privateroom_table', // функция, с помощью которой мы будем придавать форме табличный вид
  );
 
  $form['pl']['table']['header'] = array(
    '#type' => 'value',
    '#value' => array('Номер', 'Размещен', 'Дата', 'Примечание', 'Инфо'),
  );


  
  $records = db_query("select plh.PRICE_LIST_HEAD_ID, 
							  plh.IS_POSTED, 
							  DATE_FORMAT(plh.PRICE_LIST_HEAD_DATE, '%d.%m.%Y') as PRICE_LIST_HEAD_DATE, 
							  plh.PRICE_LIST_HEAD_COMMENT, 
							  plh.PRICE_LIST_HEAD_TERMS as PRICE_LIST_HEAD_TERMS
			  		   from t_price_list_head plh, t_user u 
					   where plh.user_id = u.user_id and u.uid = :uid", array(':uid' => $user->uid));
 
  foreach ($records as $rec) {
    $form['pl']['table']['data'][$rec->PRICE_LIST_HEAD_ID]['PRICE_LIST_HEAD_ID'] = array(
      '#markup' => $rec->PRICE_LIST_HEAD_ID,
    );
 
    $form['pl']['table']['data'][$rec->PRICE_LIST_HEAD_ID]['IS_POSTED'] = array(
      '#type' => 'checkbox',
      '#default_value' => $rec->IS_POSTED
    );

    $form['pl']['table']['data'][$rec->PRICE_LIST_HEAD_ID]['PRICE_LIST_HEAD_DATE'] = array(
      '#markup' => $rec->PRICE_LIST_HEAD_DATE,
    );

    $form['pl']['table']['data'][$rec->PRICE_LIST_HEAD_ID]['PRICE_LIST_HEAD_COMMENT'] = array(
      '#markup' => $rec->PRICE_LIST_HEAD_COMMENT,
    );

    $form['pl']['table']['data'][$rec->PRICE_LIST_HEAD_ID]['PRICE_LIST_HEAD_TERMS'] = array(
	  '#type' => 'textarea',
      '#default_value' => $rec->PRICE_LIST_HEAD_TERMS,
      '#required' => TRUE
    );
  }
 
  
/*					   
  $table = '<table> <tr>
               <th>Размещен</th>
			   <th>Номер</th>
			   <th>Дата</th>
			   <th>Примечание</th>
			   <th>Удалить</th>
             </tr>';
  
  foreach ($records as $rec) {
 
	 $table .= '<tr id="' . $rec -> PRICE_LIST_HEAD_ID . '">';
	 
	 $table .= '<td rowspan="2" width=5%>';
	 if ($rec->IS_POSTED == 1) {
       $table .= '<input type="checkbox" checked="checked"/>';		 
	 } else {
	   $table .= '<input type="checkbox"/>';
	 }	 
	 $table .= '</td>';
	 
	 $table .= '<td rowspan="2" width=10%>' . $rec->PRICE_LIST_HEAD_ID . '</td>';
	 $table .= '<td rowspan="2" width=10%>' . $rec->PRICE_LIST_HEAD_DATE . '</td>';
	 $table .= '<td width=70%>' . $rec->PRICE_LIST_HEAD_COMMENT . '</td>';
	 $table .= '<td rowspan="2" width=5%>' . '<a href="">del</a>' . '</td>';
	 $table .= '</tr>';
	 $table .= '<tr>';
	 
	 $table .= '<td width=70%><textarea id="' . $rec -> PRICE_LIST_HEAD_ID . '" name="PRICE_LIST_HEAD_TERMS">' . ($rec->PRICE_LIST_HEAD_TERMS) . '</textarea></td>';
	 
	 $table .= '</tr>';
  }			 
  
  $table .= '</table>';
   
  $form['pl']['table'] = array(
    '#markup' => $table
  );
  
  $form['pl']['add_pl'] = array(
    '#type' => 'button', 
    '#value' => t('Загрузить')
  );
 */

//
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Сохранить')
  );
 
 $form['#validate'][] = 'dtbx_privateroom_profile_validate';
 $form['#submit'][] = 'dtbx_privateroom_submit';
 
 
  return $form;
}

function theme_dtbx_privateroom_table($vars) {
  $form = $vars['form'];
  $rows = array();
 
  foreach (element_children($form['data']) as $key) {
    foreach (element_children($form['data'][$key]) as $name) {
      $rows[$key][] = drupal_render($form['data'][$key][$name]);
    }
  }
 
  return theme('table', array(
    'header' => $form['header']['#value'],
    'rows' => $rows,
  ));
}

/**
* Page access.
**/

function dtbx_privateroom_access() {
  global $user;
  return ($user->uid > 0);

}

function dtbx_privateroom_profile_validate($form, &$form_state) {
	global $user;
 //Профиль   
	drupal_set_message('validate', 'status');
	
	drupal_set_message($form_state['values']['profile']['name'], 'status');
	
	$account = $user;
    // Validate new or changing username.
    if (isset($form_state['values']['profile']['name'])) {
      if ($error = user_validate_name($form_state['values']['profile']['name'])) {
        form_set_error('profile][name', $error);
      }
      elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('name', db_like($form_state['values']['profile']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
        form_set_error('profile][name', t('The name %name is already taken.', array('%name' => $form_state['values']['profile']['name'])));
      }
    }

    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['profile']['mail']);
    form_set_value($form['profile']['mail'], $mail, $form_state);

    // Validate the e-mail address, and check if it is taken by an existing user.
    if ($error = user_validate_mail($form_state['values']['profile']['mail'])) {
      form_set_error('profile][mail', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('mail', db_like($form_state['values']['profile']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      // Format error message dependent on whether the user is logged in or not.
      if ($GLOBALS['user']->uid) {
        form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['profile']['mail'])));
      }
      else {
        form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['profile']['mail'], '@password' => url('user/password'))));
      }
    }
  //
  //  
}

function dtbx_privateroom_submit($form, &$form_state) {
  global $user;

 //Профиль
  $account = clone $user;
  
  $edit = array(
    'name' => $form_state['values']['profile']['name'],
    'pass' => $form_state['values']['profile']['pass'],
    'mail' => $form_state['values']['profile']['mail']
  );
  
  user_save($account, $edit, 'account');
  
  cache_clear_all();

  drupal_set_message(t('The changes have been saved.'));
  /*
   
 
 
  //Персональные данные	
   
	db_query('UPDATE t_user u 
		      SET u.USER_SURNAME = :USER_SURNAME, 
				  u.USER_NAME = :USER_NAME, 
				  u.USER_PATRONYMIC = :USER_PATRONYMIC, 
				  u.COMPANY_NAME = :COMPANY_NAME, 
				  u.COMPANY_ADDRESS = :COMPANY_ADDRESS, 
				  u.COMPANY_ACTUAL_ADDRESS = :COMPANY_ACTUAL_ADDRESS, 
				  u.COMPANY_CONTACT = :COMPANY_CONTACT 
              WHERE u.UID = :UID', 
		   array(':USER_SURNAME' => $form_state['values']['access']['surname'],
				 ':USER_NAME' => $form_state['values']['access']['firstname'],
				 ':USER_PATRONYMIC' => $form_state['values']['access']['patronname'],
				 ':COMPANY_NAME' => $form_state['values']['access']['companyname'],
				 ':COMPANY_ADDRESS' => $form_state['values']['access']['juraddress'],
				 ':COMPANY_ACTUAL_ADDRESS' => $form_state['values']['access']['realaddress'],
				 ':COMPANY_CONTACT' =>  $form_state['values']['access']['contact'],
				 ':UID' => $user->uid
		   ));
		   
  //Прайс-лист
  foreach (element_children($form_state['values']['pl']['table']['data']) as $key) {
	$f_key = $key;  
    foreach (element_children($form_state['values']['pl']['table']['data'][$key]) as $name) {
	  $f_name = $name;
	  $f_values = $form_state['values']['pl']['table']['data'][$key][$name];
      //drupal_set_message($f_key . ' ' . $f_name . ' '. $f_values, 'status');
      /*drupal_set_message('update t_price_list_head plh
				 set plh.' . $f_name . ' = \'' . $f_values . '\'
			   WHERE plh.PRICE_LIST_HEAD_ID = ' . $f_key, 'status');*/
	  
/*	  
	  db_query('update t_price_list_head plh
				 set plh.' . $f_name . ' = \'' . $f_values . '\'
			   WHERE plh.PRICE_LIST_HEAD_ID = ' . $f_key);
			   
    }
  }
  */
  return $form;
}


?>
