<?php

/**
 * init().
 */

  
function dtbx_privateroom_init() {

static $already_added = FALSE;

  if ($already_added) {
    return; // Don't add the JavaScript and CSS multiple times.
  }	
  // Include the CTools tools that we need.
  //ctools_include('ajax');
  //ctools_include('modal');

  // Add CTools' javascript to the page.
  //ctools_modal_add_js();
  
  $path = drupal_get_path('module', 'dtbx_privateroom');
  //drupal_add_js($path . '/js/dtbx_privateroom.js', array('weight' => -20));
  
  $already_added = TRUE;
}

/**
 * Implements hook_menu().
 */
 
function dtbx_privateroom_menu() 
{


    $items['dtbx_privateroom'] = array(
        'title' => 'Личные данные',
        'access callback' => 'dtbx_privateroom_access',
        'page callback' => 'dtbx_privateroom_callback',
		//'page arguments' => array(1),		

        'type' => MENU_CALLBACK,
    );

	$items['dtbx_privateroom/record/delete/%ctools_js/%'] = array(
        'title' => 'Удалить',
        'access callback' => TRUE,
        'page callback' => 'dtbx_privateroom_record_delete',
		'page arguments' => array(3, 4, 5),
		
        'type' => MENU_CALLBACK,	
	);	
	
	$items['dtbx_privateroom/filial/add/%ctools_js/%'] = array(
        'title' => 'Поиск группы',
        'access callback' => TRUE,
        'page callback' => 'dtbx_privateroom_filial_add',
		'page arguments' => array(3, 4),
		'type' => MENU_CALLBACK,	
	);	
	
	return $items;
}

/**
 * Implements hook_theme().
 */
  
function dtbx_privateroom_theme() {
  return array(
    'dtbx_privateroom_table' => array(
      'render element' => 'form',
    ),
  );
}	

 
 
/**
* Page callback.
**/

//function dtbx_privateroom_callback($ajax) 
function dtbx_privateroom_callback() 
{
  /*if ($ajax) {
    global $user;
    $form_state = array(
      'ajax' => TRUE,
      'title' => t('Личный кабинет ') . $user -> name
    );

    $output = ctools_modal_form_wrapper('dtbx_privateroom_page', $form_state);

    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }
	
    print ajax_render($output);
  }
  else {*/
    return drupal_get_form('dtbx_privateroom_page');
  /*}	*/
}

function dtbx_privateroom_form_process_password_confirm($element) {
  global $user;
  
  $element['pass1']['#title'] = t('Новый пароль'); 
  $element['pass2']['#title'] = t('Подтвердите новый пароль');


  $js_settings = array(
    'password' => array(
      'strengthTitle' => t('Password strength:'),
      'hasWeaknesses' => t('To make your password stronger:'),
      'tooShort' => t('Make it at least 6 characters'),
      'addLowerCase' => t('Add lowercase letters'),
      'addUpperCase' => t('Add uppercase letters'),
      'addNumbers' => t('Add numbers'),
      'addPunctuation' => t('Add punctuation'),
      'sameAsUsername' => t('Make it different from your username'),
      'confirmSuccess' => t('yes'),
      'confirmFailure' => t('no'),
      'weak' => t('Weak'),
      'fair' => t('Fair'),
      'good' => t('Good'),
      'strong' => t('Strong'),
      'confirmTitle' => t('Passwords match:'),
      'username' => (isset($user->name) ? $user->name : ''),
    ),
  );

  $element['#attached']['js'][] = drupal_get_path('module', 'user') . '/user.js';
  // Ensure settings are only added once per page.
  static $already_added = FALSE;
  if (!$already_added) {
    $already_added = TRUE;
    $element['#attached']['js'][] = array('data' => $js_settings, 'type' => 'setting');
  }

  return $element;
}


function dtbx_privateroom_page($form, &$form_state) 
{

	$surname = "";
	$firstname = "";
	$patronname = "";
	$companyname = "";
	$juraddress = "";
	$realaddress = "";
	$contact = "";
	$persondata = "Персональные данные";
    $profile = "Профиль пользователя";
	$pl = "Прайс-лист";
	$filial = "Филиалы";
	
	//Локация
	
	$ip = ip_address();
	//$ip = '178.237.185.72';
	$answer = ipgeo_from_xml($ip);
	$ip_city = (is_object($answer))?$answer->city:'';
	
	global $user;
	$items = db_query('select * from t_user where uid = :uid', array(':uid' => $user->uid))->fetchObject();
	
	if(count($items) > 0)
	{
		$surname = $items->user_surname;
		$firstname = $items->user_name;
		$patronname = $items->user_patronymic;
		$companyname = $items->company_name;
		$juraddress = $items->company_address;
		$realaddress = $items->company_actual_address;
		$contact = $items->company_contact;
		$phone = $items->company_phone;
		$email = $items->company_email;
		
		//$persondata .= $items->USER_LOGIN;
        $form['user_id'] = array(
          '#type' => 'value',
          '#value' => $items->user_id
        );		
	}
  
  //$form['#attributes'] = array('class' => 'ctools-use-modal');
 
  $form['vertical_tabs'] = array(
    '#type' => 'vertical_tabs',
	'#title' => $items->user_login, 
	//'#default_tab' => 'edit-pl'
  ); 
//
  module_load_include('pages.inc', 'user');
  $form_user = drupal_get_form('user_profile_form', $user, 'account');
  /*
  $form_user['account']['#group'] = 'vertical_tabs';
  $form_user['locale']['#group'] = 'vertical_tabs';
  $form_user['picture']['#group'] = 'vertical_tabs';    
  */ 
 
  $form['profile'] = array(
    '#type' => 'fieldset', 
    '#title' => t($profile), 
    '#tree' => TRUE,
    '#attributes' => array('class' => array('profile')),
	'#group' => 'vertical_tabs',
	'#validate' => array('dtbx_privateroom_profile_validate')
  );
  
  $form['profile']['city'] = array(
     '#type' => 'textfield',
      '#title' => t('Город'),
    '#default_value' =>  $ip_city
  );
  
  $form['profile']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#size' => 60,
    '#maxlength' => USERNAME_MAX_LENGTH,
	'#default_value' => $user->name,
    '#required' => TRUE
  );
  
  $form['profile']['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#required' => TRUE,
    '#default_value' => $user->mail,  
  );

  $form['profile']['current_pass'] = array(
    '#type' => 'password',
    '#size' => 25,
    '#title' => t('Current password'),	
  );
  
  $form['profile']['pass'] = array(
    '#type' => 'password_confirm',
    '#size' => 25,
	'#process' => array('form_process_password_confirm', 'dtbx_privateroom_form_process_password_confirm'),
  );   
  

//   
  $form['access'] = array(
    '#type' => 'fieldset', 
    '#title' => t($persondata), 
    '#tree' => TRUE,
    '#attributes' => array('class' => array('persondata')),
	'#group' => 'vertical_tabs'
  );  
  
  $form['access']['surname'] = array(
    '#type' => 'textfield', 
	'#title' => t('Фамилия'), 
    '#default_value' => $surname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['firstname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Имя'), 
    '#default_value' => $firstname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['patronname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Отчество'), 
    '#default_value' => $patronname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['companyname'] = array(
    '#type' => 'textfield', 
    '#title' => t('Наименование компании'), 
    '#default_value' => $companyname, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['juraddress'] = array(
    '#type' => 'textfield', 
    '#title' => t('Юридический адрес'), 
    '#default_value' => $juraddress, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['realaddress'] = array(
    '#type' => 'textfield', 
    '#title' => t('Фактический  адрес'), 
    '#default_value' => $realaddress, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  $form['access']['contact'] = array(
    '#type' => 'textfield', 
    '#title' => t('Контактное лицо'), 
    '#default_value' => $contact, 
    '#size' => 60, 
    '#maxlength' => 128
  );

  $form['access']['phone'] = array(
    '#type' => 'textfield', 
    '#title' => t('Телефон для заказов'), 
    '#default_value' => $phone, 
    '#size' => 60, 
    '#maxlength' => 128
  );
  
  
  $form['pl'] = array(
    '#type' => 'fieldset', 
    '#title' => t($pl), 
    '#tree' => TRUE,
    '#attributes' => array('class' => array('pl')),
	'#group' => 'vertical_tabs'	
  ); 

  $form['pl']['table'] = array(
    '#tree' => TRUE,
    '#theme' => 'dtbx_privateroom_table',
  );
 
  $form['pl']['table']['header'] = array(
    '#type' => 'value',
    '#value' => array('Номер', 'Размещен', 'Дата', 'Примечание', 'Инфо', 'Удалить'),
  );


  
  $records = db_query("select plh.price_list_head_id, 
							  plh.is_posted, 
							  date_format(plh.price_list_head_date, '%d.%m.%y') as price_list_head_date, 
							  plh.price_list_head_comment, 
							  plh.price_list_head_terms as price_list_head_terms
			  		   from t_price_list_head plh, t_user u 
					   where plh.user_id = u.user_id and u.uid = :uid", array(':uid' => $user->uid));
 
  foreach ($records as $rec) {
    $form['pl']['table']['data'][$rec->price_list_head_id]['price_list_head_id'] = array(
      '#markup' => $rec->price_list_head_id,
    );
 
    $form['pl']['table']['data'][$rec->price_list_head_id]['is_posted'] = array(
      '#type' => 'checkbox',
      '#default_value' => $rec->is_posted
    );

    $form['pl']['table']['data'][$rec->price_list_head_id]['price_list_head_date'] = array(
      '#markup' => $rec->price_list_head_date,
    );

    $form['pl']['table']['data'][$rec->price_list_head_id]['price_list_head_comment'] = array(
      '#markup' => $rec->price_list_head_comment,
    );

    $form['pl']['table']['data'][$rec->price_list_head_id]['price_list_head_terms'] = array(
	  '#type' => 'textarea',
	  '#rows' => 2,
      '#default_value' => $rec->price_list_head_terms,
      '#required' => false
    );
//////
	$linkdel = ctools_modal_text_button(t('удалить'), 'dtbx_privateroom/record/delete/ajax/' .  $rec->price_list_head_id . '/dtbx_privateroom_pl_delete', '', 'ctools-modal-modal-popup-small');
	
	
	$form['pl']['table']['data'][$rec->price_list_head_id]['del'][] = array(
      '#markup' => $linkdel,	  
	);
	

	$form['pl']['file'] = array(
		'#type' => 'file',
		'#title' => 'Прайс-лист',
		'#description' => 'Выберите файл с расширением csv',
	  );
	
// ФИЛИАЛЫ		  
	$form['filial'] = array(
		'#type' => 'fieldset', 
		'#title' => t($filial), 
		'#tree' => TRUE,
		'#attributes' => array('class' => array('persondata')),
		'#group' => 'vertical_tabs'	
	); 
	

	$linkfilial = ctools_modal_text_button(t('добавить филиал'), 'dtbx_privateroom/filial/add/ajax/' .  $items->user_id, '', 'ctools-modal-modal-popup-small');
	
	$form['filial']['addfilial'] = array(
			'#type' => 'fieldset', 
			'#title' => $linkfilial, 
	);				   

	$form['filial']['table'] = array(
		'#tree' => TRUE,
		'#theme' => 'dtbx_privateroom_table',
	);
 
	$form['filial']['table']['header'] = array(
		'#type' => 'value',
		'#value' => array('Наименование' . $items->user_id, 'Юр.адрес', 'Факт.адрес', 'Контакт', 'Тел.', 'Удалить'),
	);
	
	$filials = db_query('select * from t_user where owner_user_id = :user_id', 
						array(':user_id' => $items->user_id));
	
	foreach ($filials as $rec) {
	
		$form['filial']['table']['data'][$rec -> user_id]['companyname'] = array(
			'#markup' => $rec -> company_name
		);
	  
		$form['filial']['table']['data'][$rec -> user_id]['juraddress'] = array(
			'#markup' => $rec -> company_address
		);
	  
		$form['filial']['table']['data'][$rec -> user_id]['realaddress'] = array(
			'#markup' => $rec -> company_actual_address
		);
	  
		$form['filial']['table']['data'][$rec -> user_id]['contact'] = array(
			'#markup' => $rec -> company_contact
		);

		$form['filial']['table']['data'][$rec -> user_id]['phone'] = array(
			'#markup' => $rec -> company_phone
		);	
		
		$linkdel = ctools_modal_text_button(t('удалить'), 'dtbx_privateroom/record/delete/ajax/' .  $rec->user_id . '/dtbx_privateroom_filial_delete' , '', 'ctools-modal-modal-popup-small');
	
		$form['filial']['table']['data'][$rec->user_id]['del'][] = array(
			'#markup' => $linkdel
		);
	}	
	
  
//	  
	  

  $module_path = drupal_get_path('module', 'dtbx_privateroom');
  $form['#attached'] = array(
    'js' => array(
      $module_path . '/js/dtbx_privateroom.js',
    ),
  );	
//////
  }
 
//
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Сохранить')
  );
 
 $form['#validate'][] = 'dtbx_privateroom_profile_validate';
 $form['#submit'][] = 'dtbx_privateroom_submit';

  return $form;
}

/**
 * Удаление записи 
**/

function dtbx_privateroom_record_delete($js, $del_id, $form_del_id){
	
    if ($js) {
		
		$css = '#modalContentQ{
					top: 22px!important;
					left: auto!important;
					right: 80px!important;
				}';
		//$css_preprocessed = '<style type="text/css" media="all">' . "\n<!--/*--><![CDATA[/*><!--*/\n" . drupal_load_stylesheet_content($css, TRUE) . "\n/*]]>*/-->\n" . '</style>';
		drupal_add_css($css, array('type' => 'inline'));
		
		
		$form_state = array(
			'title' => t('Удаление записи'),
			'ajax' => TRUE,
			'del_id' => $del_id,
			'form_del_id' => $form_del_id,
			
		);
		//ctools_stylizer_add_css
		$output = ctools_modal_form_wrapper('dtbx_privateroom_record_delete_page', $form_state);
		
		if (!empty($form_state['executed'])) {
			$output = array();
			if ($form_state['complete']) {	
				$ok = ctools_ajax_text_button(t('OK'), ctools_ajax_command_redirect('dtbx_privateroom'));
				$output[] = ctools_modal_command_display(t('Удаление записи'), '<div class="modal-message">Запись удалена. <br>' . $ok . '</div>');
			} else  {
				if ($form_state['cancel']) {
					$output[] = ctools_modal_command_dismiss(); 		
				}
			}
		}	
	
		print ajax_render($output); 
		exit;
	} else {
		$form['del_id'] = array(
			'#type' => 'value',
			'#value' => $del_id,
			'form_del_id' => $form_del_id,
		);	
		drupal_get_form('dtbx_privateroom_record_delete_page', $form_state);		
	}	
}

function dtbx_privateroom_record_delete_page($form, &$form_state){
	
	$del_id = $form_state['del_id'];
	$form_del_id = $form_state['form_del_id'];
	
	$form['del_id'] = array(
		'#type' => 'value',
		'#value' => $del_id,
	);
    
	$form['del_text'] = array(
		'#markup' => 'Удалить запись № ' . $del_id . '/' .$form_del_id . '?',
	);
	
	$form['del_ok'] = array(
		'#type' => 'submit',
		'#value' => t('Удалить'), 
		'#submit' => array($form_del_id),
		'#prifix' => '<div>'		
	);

	$form['del_cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Отменить'), 
		'#submit' => array('dtbx_privateroom_record_delete_cancel'),
		'#suffix' => '</div>'
	);	
	
	return $form;
}

function dtbx_privateroom_record_delete_cancel($form, &$form_state) {
	$form_state['cancel'] = TRUE;
}

/**
 * Удаление прайс-листа
**/


function dtbx_privateroom_pl_delete($form, &$form_state) {
	$pl_id = $form_state['values']['del_id'];
  //$user_id = $form_state['values']['user_id'];
   
   	global $user;
	$items = db_query('select * from t_user where uid = :uid', array(':uid' => $user->uid))->fetchObject();
    $user_id = $items -> user_id; 
	/*
   db_query('update t_price_list_head plh
			    set plh.is_posted = 0
			  where plh.user_id =' . $user_id . ' and
			        plh.price_list_head_id = ' . $pl_id);
*/
	$transaction = db_transaction();
	
	try {
		db_query('delete from t_price_list_detail
				  where t_price_list_detail.price_list_head_id = ' . $pl_id . ' and
				    exists (select *
						    from t_price_list_head plh
						    where plh.user_id = 6 and
								  plh.price_list_head_id = t_price_list_detail.price_list_head_id) ');

		db_query('delete from t_price_list_head
				  where price_list_head_id = ' . $pl_id. ' and 
				    user_id =' . $user_id);
  
   	}
		catch (Exception $e) {
		$transaction -> rollback();
		watchdog_exception('watchdog', $e);
	}	
	
	$form_state['complete'] = TRUE;	
}


/**
 *
**/

/**
 * ФИЛИАЛ
**/
function dtbx_privateroom_filial_add($js, $userid)
{	
	global $user;
	if ($js == 'ajax') {
		$form_state = array(
			'title' => t('Добавление записи'),
			'ajax' => TRUE
		);
  
		$output = ctools_modal_form_wrapper('dtbx_privateroom_filial_add_page', $form_state);
		
		if (!empty($form_state['executed'])) {
			$output = array();
			
			if ($form_state['complete']) {			
				//$ok = ctools_ajax_text_button(t('OK'), ctools_ajax_command_redirect('dtbx_privateroom'));
				/*
				$form_state['no_redirect'] = 0;
				$form_state['redirect'] = array('dtbx_privateroom');
				*/
				$s = '';
				foreach (element_children($form_state['values']) as $key) {
					$s .= $key . '=' . $form_state['values'][$key] . '<br>';
				}
				db_query('insert into t_user
							(user_type_id, company_name, company_address, company_actual_address, company_contact, uid, owner_user_id, company_phone)
						  values 
							(2, :company_name, :company_address, :company_actual_address, :company_contact, :uid, :owner_user_id, :company_phone)',
						  array(':company_name' => $form_state['values']['companyname'], 
								':company_address' => $form_state['values']['juraddress'], 
								':company_actual_address' => $form_state['values']['realaddress'], 
								':company_contact' => $form_state['values']['contact'], 
								':uid' => $user->uid,
								':owner_user_id' => $userid, 
								':company_phone' => $form_state['values']['phone']
								)
						);
				$ok = ctools_ajax_text_button(t('OK'), ctools_ajax_command_redirect('dtbx_privateroom'));
				$output[] = ctools_modal_command_display(t('Добавление записи'), '<div class="modal-message">Филиал добавлен.<br>' . $ok . '</div>');
				
			} else  {
				if ($form_state['cancel']) {
					$output[] = ctools_modal_command_dismiss(); 		
				}
			}
		}	
	
		print ajax_render($output); 
		exit;
	} else {
		drupal_get_form('dtbx_privateroom_filial_add_page');
	}	
}

function dtbx_privateroom_filial_add_page($form, &$form_state){
	
	$form['companyname'] = array(
		'#type' => 'textfield', 
		'#title' => t('Наименование филиала'), 
		'#default_value' => $companyname, 
		'#size' => 60, 
		'#maxlength' => 128
	  );
	  
	$form['juraddress'] = array(
		'#type' => 'textfield', 
		'#title' => t('Юридический адрес'), 
		'#default_value' => $juraddress, 
		'#size' => 60, 
		'#maxlength' => 128
	  );
	  
	$form['realaddress'] = array(
		'#type' => 'textfield', 
		'#title' => t('Фактический  адрес'), 
		'#default_value' => $realaddress, 
		'#size' => 60, 
		'#maxlength' => 128
	  );
	  
	$form['contact'] = array(
		'#type' => 'textfield', 
		'#title' => t('Контактное лицо'), 
		'#default_value' => $contact, 
		'#size' => 60, 
		'#maxlength' => 128
	  );

	$form['phone'] = array(
		'#type' => 'textfield', 
		'#title' => t('Телефон для заказов'), 
		'#default_value' => $phone, 
		'#size' => 60, 
		'#maxlength' => 128
	  );
	
	$form['submit'] = array(
		'#type' => 'submit', 
		'#value' => t('Сохранить'),
		'#attributes' => array(
			'class' => array('ctools-use-ajax form-submit'),
			'id' => array('edit-add-url')
		),
		
		'#submit' => array('dtbx_privateroom_filial_add_submit')
	);
	
	
	return $form;
}

function dtbx_privateroom_filial_add_submit($form, &$form_state){
	$form_state['complete'] = TRUE;
}

function dtbx_privateroom_filial_delete($form, &$form_state) {
	$del_id = $form_state['values']['del_id'];
	
	global $user;
	$items = db_query('select * from t_user where uid = :uid', array(':uid' => $user->uid))->fetchObject();
    $user_id = $items -> user_id; 
	
	//drupal_set_message('del_id = ' . $del_id . '<br>user_id = ' .  $user_id, 'status');
	
	$transaction = db_transaction();
	
	try { 
		
		db_query('delete from t_price_list_detail
				  where exists (select *
								from t_price_list_head plh
								where plh.user_id = ' . $del_id . ' and
									  plh.price_list_head_id = t_price_list_detail.price_list_head_id) ');

		db_query('delete from t_price_list_head
				  where user_id = ' . $del_id );
			 
		db_query('delete from t_user 
				  where owner_user_id = :owner_user_id and
				  user_id = :user_id',
				array(
					':owner_user_id' => $user_id,
					':user_id' => $del_id
				)
			 );
		
	}
		catch (Exception $e) {
		$transaction -> rollback();
		watchdog_exception('watchdog', $e);
	}	
	
	$form_state['complete'] = TRUE;	
}

/**
 * 
**/


/**
 * Тема таблица
**/
function theme_dtbx_privateroom_table($vars) {
  $form = $vars['form'];
  $rows = array();
 
  foreach (element_children($form['data']) as $key) {
    foreach (element_children($form['data'][$key]) as $name) {
      $rows[$key][] = drupal_render($form['data'][$key][$name]);
    }
  }
 
  return theme('table', array(
    'header' => $form['header']['#value'],
    'rows' => $rows,
  ));
}

/**
* Page access.
**/

function dtbx_privateroom_access() {
  global $user;
  return ($user->uid > 0);

}

function dtbx_privateroom_profile_validate($form, &$form_state) {
	global $user;

 /// file upload
	//drupal_set_message('start validation', 'status');
	$validators = array(
		'file_validate_extensions' => array('csv xls xml'),
	);
	if ($file = file_save_upload('pl', $validators, 'public://')) {
		drupal_set_message('file uploaded', 'status');
		$form_state['values']['file'] = $file; 
	} /*else
	{
		drupal_set_message('not file uploaded', 'error');
	}*/
	//////////////////
	
 //Профиль   
	//drupal_set_message('validate', 'status');
	
	//drupal_set_message($form_state['values']['profile']['name'], 'status');
	
	$account = $user;
    // Validate new or changing username.
    if (isset($form_state['values']['profile']['name'])) {
      if ($error = user_validate_name($form_state['values']['profile']['name'])) {
        form_set_error('profile][name', $error);
      }
      elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('name', db_like($form_state['values']['profile']['name']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
        form_set_error('profile][name', t('The name %name is already taken.', array('%name' => $form_state['values']['profile']['name'])));
      }
    }

    // Trim whitespace from mail, to prevent confusing 'e-mail not valid'
    // warnings often caused by cutting and pasting.
    $mail = trim($form_state['values']['profile']['mail']);
    form_set_value($form['profile']['mail'], $mail, $form_state);

    // Validate the e-mail address, and check if it is taken by an existing user.
    if ($error = user_validate_mail($form_state['values']['profile']['mail'])) {
      form_set_error('profile][mail', $error);
    }
    elseif ((bool) db_select('users')->fields('users', array('uid'))->condition('uid', $account->uid, '<>')->condition('mail', db_like($form_state['values']['profile']['mail']), 'LIKE')->range(0, 1)->execute()->fetchField()) {
      // Format error message dependent on whether the user is logged in or not.
      if ($GLOBALS['user']->uid) {
        form_set_error('mail', t('The e-mail address %email is already taken.', array('%email' => $form_state['values']['profile']['mail'])));
      }
      else {
        form_set_error('mail', t('The e-mail address %email is already registered. <a href="@password">Have you forgotten your password?</a>', array('%email' => $form_state['values']['profile']['mail'], '@password' => url('user/password'))));
      }
    }
  //
  //  
}

function dtbx_privateroom_submit($form, &$form_state) {
  global $user;
   //////// file upload
	if(isset($form_state['values']['file']))
	{
		$file = $form_state['values']['file'];
		$file->status = FILE_STATUS_PERMANENT; // Изменяем статус файла на "Постоянный"
		file_save($file); // Сохраняем новый статус

		$filepath = drupal_realpath($file->uri);
		//$file_contents = file_get_contents($filepath);
		drupal_set_message($filepath, 'status');
		$handle = fopen($filepath, "r");
		$datalines = array();
		$count = 0;
		if ($handle) 
		{
			while (($line = fgets($handle)) !== false) 
			{
				// process the line read.
				//drupal_set_message($line, 'status');
				$datalines[] = $line;
				$count++;
			}
			fclose($handle);
		} 
		else 
		{
			// error opening the file.
			drupal_set_message('error opening the file', 'error');
		} 
		
		if(count($datalines) > 0)
		{
			$l_user = db_query('select * from t_user where uid = :uid', array(':uid' => $user->uid))->fetchObject();
			
			
			$query = 'insert into detbox.t_price_list_head 
					(price_list_head_date, user_id, currency_id, is_posted, price_list_head_comment, price_list_head_terms) 
					values 
					(\'' . date("Y-m-d H:i:s") . '\', ' . $l_user->user_id . ', 1, 1, \'\' , \'\')';
					//:price_list_head_date , :user_id, 1, 1, :price_list_head_comment, :price_list_head_terms
			db_query($query);	
			$q_id = db_query('select last_insert_id() as plh_id')->fetchObject();
			
			drupal_set_message('UserID=' . $q_id->plh_id, 'status');
			$count1=0;
			foreach($datalines as $oneline) 
			{
				if($count1 != 0)
				{
					$lineitems = explode(";", $oneline);
					$prodcode = isset($lineitems[0]) ? $lineitems[0] : "";
					$prodname = isset($lineitems[1]) ? str_replace("'", " ", $lineitems[1]) : "";
					$prodcount = isset($lineitems[2]) ? $lineitems[2] : 0;
					$prodprice = isset($lineitems[3]) ? str_replace(",", ".", $lineitems[3]) : 0.0;
					$vendorname = isset($lineitems[4]) ? $lineitems[4] : "";
					$query = 'insert into t_price_list_detail 
					(price_list_head_id, product_code, product_name, product_count, product_price, vendor_id, ext_vendor_name) 
					values 
					(' . $q_id->plh_id . ', \'' . $prodcode . '\', \'' . $prodname . '\', ' . $prodcount . ' , ' . $prodprice . ',1 , \'' . $vendorname . '\')';
					drupal_set_message($query, 'status');
					db_query($query);
				}
				$count1++;
			}
			drupal_set_message($count . ' = ' . $count1, 'status');
		}
		
		
		return;
	}
  //////////////////////

 //Профиль
  $account = clone $user;
  
  $edit = array(
    'name' => $form_state['values']['profile']['name'],
    'pass' => $form_state['values']['profile']['pass'],
    'mail' => $form_state['values']['profile']['mail']
  );
  
  user_save($account, $edit, 'account');
  
  

  
  //Персональные данные	
   
	db_query('update t_user u 
		      set u.user_surname = :user_surname, 
				  u.user_name = :user_name, 
				  u.user_patronymic = :user_patronymic, 
				  u.company_name = :company_name, 
				  u.company_address = :company_address, 
				  u.company_actual_address = :company_actual_address, 
				  u.company_contact = :company_contact,
				  u.company_phone = :company_phone
              where u.uid = :uid', 
		   array(':user_surname' => $form_state['values']['access']['surname'],
				 ':user_name' => $form_state['values']['access']['firstname'],
				 ':user_patronymic' => $form_state['values']['access']['patronname'],
				 ':company_name' => $form_state['values']['access']['companyname'],
				 ':company_address' => $form_state['values']['access']['juraddress'],
				 ':company_actual_address' => $form_state['values']['access']['realaddress'],
				 ':company_contact' =>  $form_state['values']['access']['contact'],
				 ':company_phone' =>  $form_state['values']['access']['phone'],
				 ':uid' => $user->uid
		   ));
		   
  //Прайс-лист
  foreach (element_children($form_state['values']['pl']['table']['data']) as $key) {
	$f_key = $key;  
    foreach (element_children($form_state['values']['pl']['table']['data'][$key]) as $name) {
	  $f_name = $name;
	  $f_values = $form_state['values']['pl']['table']['data'][$key][$name];
	  if (($form['pl']['table']['data'][$key][$name]['#type'] == 'textarea') || (($form['pl']['table']['data'][$key][$name]['#type'] == 'checkbox'))){
		  
		//drupal_set_message($f_key . ' ' . $f_name . ' '. $f_values . ' ' . $form['pl']['table']['data'][$key][$name]['#type'], 'status');
		/*drupal_set_message('update t_price_list_head plh
				 set plh.' . $f_name . ' = \'' . $f_values . '\'
			   WHERE plh.PRICE_LIST_HEAD_ID = ' . $f_key, 'status');*/
	  
	  
		db_query('update t_price_list_head plh
				 set plh.' . $f_name . ' = \'' . $f_values . '\'
				  WHERE plh.price_list_head_id = ' . $f_key);
	  }		  
				
    }
  }
  
  drupal_set_message(t('The changes have been saved.'));
  $form_state['rebuild'] = true;
  cache_clear_all();

  return $form;
}

function ipgeo_from_xml($ip) {
  $url = 'http://ipgeobase.ru:7020/geo?ip=' . $ip;

  // simplexml_load_file($url) doesn't work with allow_url_fopen = Off.
  $result = drupal_http_request($url);
  if($result->code < 300 && $xml = @simplexml_load_string($result->data)) {
    return (object) array(
      'country'   => (string)$xml->ip->country,
      'city'      => (string)$xml->ip->city,
      'subject'   => (string)$xml->ip->region,
      'fo'        => (string)$xml->ip->district,
      'latitude'  => (string)$xml->ip->lat,
      'longitude' => (string)$xml->ip->lng,
    );
  }
  else {
    return FALSE;
  }
}

?>

